version: '3.8'

services:
  db:
    image: postgres:15-alpine # Using alpine for smaller image size
    container_name: acumenis_db # UPDATED NAME
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-acumenisdb} # UPDATED DEFAULT
      POSTGRES_USER: ${POSTGRES_USER:-acumenisuser} # UPDATED DEFAULT
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-supersecretpassword} # Ensure this matches .env
    ports:
      - "${POSTGRES_PORT:-5432}:5432" # Expose DB port only if needed externally
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  app:
    build:
      context: . # Build context is the root directory containing Dockerfile, Acumenis, open-deep-research
      dockerfile: Dockerfile # Dockerfile is now at the root
    container_name: acumenis_app # UPDATED NAME
    env_file:
      - .env # .env file is now at the root
    depends_on:
      db:
        condition: service_healthy # Wait for db healthcheck to pass
    ports:
      - "8000:8000" # Map host port 8000 to container port 8000
    restart: unless-stopped
    # The command is now handled by the ENTRYPOINT script in the Dockerfile

volumes:
  postgres_data:
    driver: local